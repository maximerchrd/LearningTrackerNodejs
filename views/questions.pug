extends layout

block content
    include partials/header.pug
    script(src='javascripts/star-rating.js')
    script(src='javascripts/sequence-modal.js')
    form(method='POST' action='/questions' class="form-inline")
        div.form-group
            select(name='selectionFilter', id='userQuestionsCombobox')
                each filter in questSelectedFilter
                    option(value=filter) #{filter}
        div.form-group
            select(name='regions', id='regionsSelector')
                each region in data.regions
                    option(value=region) #{region}
        div.form-group
            select(name='mainSubjectFilter', id='mainSubjectsSelector')
                each subject in mainSubjects
                    option(value=subject[0]) #{subject[0]}
        div.form-group
            select(name='subjectFilter')
                each subject in allSubjects
                    option(value=subject) #{subject}
        div.form-group
            input#keyword.form-control(type='keyword', placeholder='key word', name='keyword')
        div.form-group
            button.btn.btn-primary(type='submit' class='small-button') #{translation.search}
    div.container(style='text-align: center;')
        button(type='button' onclick='toggleCreateResource()' id='createResourceButton' class='standard-button' style='margin-right: 10%; display:inline-block;') Create a New Resource
        form(method='POST' action='/questions' class="form_sign" style='display:inline-block;')
            input(type='text' hidden=true name='selectedQuestions' value='' id='selectedQuestionsField')
            input(type='text' hidden=true name='unselectedQuestions' value='' id='unselectedQuestionsField')
            button(type='submit', id='saveChangesButton' class='standard-button') #{translation.save_changes}

    table(style='width:40%', border='1', id='questions_table')
        thead
            tr
                th #{translation.question}
                th #{translation.question_type}
                th #{translation.picture}
                th(width="120px") #{translation.rating}
                th #{translation.my_questions}
        tbody
            - var maxIndex = 10
            - if (data.questions.length < 10) {
            -        maxIndex = data.questions.length
            - }
            - for (var i = 0; i < maxIndex; ++i) {
                tr(onclick="toggleModal(this)")
                    td=data.questions[i].questionText
                    td=data.questions[i].questionType
                    td
                        img(src="/users_images/mini_" + data.questions[i].imageName)
                    td
                        div(class='stars')
                            span(class="star", id=i + "_tstar1")
                            span(class="star", id=i + "_tstar2")
                            span(class="star", id=i + "_tstar3")
                            span(class="star", id=i + "_tstar4")
                            span(class="star", id=i + "_tstar5")
                    td
                        img(id="checkboxImage" + i, src="/images/" + data.questions[i].userSelected)
            - }
    div.center-div
        button(onclick='loadMoreQuestions()' class='small-button') #{translation.load_more_questions}
    .modal(style="overflow:scroll;")
        .modal-content
            span(class="close-button", onclick="toggleModalClose()") &times;
            div.row(style='margin-top: 30px;')
                div.question-label #{translation.type}:
                div.question-type some type
            div.row
                div.question-label #{translation.question}:
                div.question-text some text
            div.row
                div.answer-option(id="answer1")
                div.answer-option(id="answer2")
            div.row
                div.answer-option(id="answer3")
                div.answer-option(id="answer4")
            div.row
                div.answer-option(id="answer5")
                div.answer-option(id="answer6")
            div.row
                div.answer-option(id="answer7")
                div.answer-option(id="answer8")
            div.row
                div.answer-option(id="answer9")
                div.answer-option(id="answer10")
            img(src="/users_images/", id="questionImage")
            div.row
                div.star-label #{translation.average_rating}:
                div(class='stars')
                    span(class="star" id="star1")
                    span(class="star" id="star2")
                    span(class="star" id="star3")
                    span(class="star" id="star4")
                    span(class="star" id="star5")
            div.row
                div.star-label #{translation.your_rating}:
                div(class='stars')
                    span(class="star" id="ustar1" onclick='rate1star()')
                    span(class="star" id="ustar2" onclick='rate2stars()')
                    span(class="star" id="ustar3" onclick='rate3stars()')
                    span(class="star" id="ustar4" onclick='rate4stars()')
                    span(class="star" id="ustar5" onclick='rate5stars()')
            form(method='POST' action='/questions' class="form-rating")
                input(type='text' hidden=true name='userRating' value='' id='userRating')
                input(type='text' hidden=true name='questionRated' value='' id='questionRated')
                input(type='text' hidden=true name='questionType' value='' id='questionType')
                button(type='submit', id='submitRating' class='small-button') #{translation.submit_my_rating}
            button.button-select(onclick="selectQuestion()" class='small-button' style='margin-top: 30px') #{translation.select_question}
    include browseResources/sequence-modal
    include browseResources/createResource

    script(type='text/javascript').
        src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"
        var modal = document.querySelector(".modal");
        var sequenceModal = document.querySelector(".sequence-modal");
        var createResourceModal = document.querySelector(".create-sequence-modal");
        var selectButton = document.querySelector(".button-select");
        var saveButton = document.getElementById("saveChangesButton");
        var userQuesCombo = document.getElementById("userQuestionsCombobox");
        var rateButton = document.getElementById("submitRating");
        var regionsSelection = document.getElementById("regionsSelector");
        var mainSubjectSelection = document.getElementById("mainSubjectsSelector");

        var questionsArray = !{JSON.stringify(data.questions)};
        var ratingForResource = !{JSON.stringify(data.ratingForResource)};
        var mainSubjectsArray = !{JSON.stringify(mainSubjects)};
        var selectedQuestions = [[]];
        var unselectedQuestions = [];
        var currentQuestionIndex = 0;

        var question_text = document.querySelector(".question-text");
        var question_type = document.querySelector(".question-type");
        var questionImage = document.getElementById("questionImage");


        if (!{JSON.stringify(data.currentUser)} == "") {
            userQuesCombo.disabled = true;
            saveButton.disabled = true;
        }
        rateButton.disabled = true;

        var table = document.getElementById("questions_table");
        var i;
        for (i = 0; table.rows.length - 1; i++) {
            var tstars = ['_tstar1', '_tstar2', '_tstar3', '_tstar4', '_tstar5'];
            var starDesign = 'star on';

            for (var j = 1; j < tstars.length + 1; j++) {
                if (questionsArray[i].rating > (j - 0.25)) {
                    document.getElementById(i + tstars[j - 1]).className = starDesign;
                } else if (questionsArray[i].rating > (j - 0.75)) {
                    document.getElementById(i + tstars[j - 1]).className = 'star half';
                } else {
                    starDesign = 'star';
                    document.getElementById(i + tstars[j - 1]).className = starDesign;
                }
            }
        }

        function toggleModal(id) {
            var index = 0;
            if (typeof id === 'undefined') {
                index = 1;
            } else if (id.rowIndex - 1 < questionsArray.length && id.rowIndex - 1 >= 0) {
                index = id.rowIndex - 1;
            }
            currentQuestionIndex = index;
            if (questionsArray[index].questionType != "Multiple Choice" && questionsArray[index].questionType != "Short Answer") {
                setModalValues(questionsArray[index], parseFloat(ratingForResource[index]));
                sequenceModal.classList.toggle("show-modal");
            } else {
                question_text.innerHTML = questionsArray[index].questionText;
                //START SETTING ANSWER OPTIONS
                answer1.innerHTML = answer2.innerHTML = answer3.innerHTML = answer4.innerHTML = answer5.innerHTML =
                    answer6.innerHTML = answer7.innerHTML = answer8.innerHTML = answer9.innerHTML = "";

                var color = "blue";
                if (evaluateString(questionsArray[index].answers[0])) {
                    if (questionsArray[index].nbCorrectAnswers > 0) {
                        color = "#40ff00";
                    } else if (questionsArray[index].nbCorrectAnswers > -1) {
                        color = "red";
                    }
                    answer1.innerHTML = "<font color='" + color + "'><i>#{translation.answer1}:</i><br></font>" + questionsArray[index].answers[0];
                }
                if (evaluateString(questionsArray[index].answers[1])) {
                    if (questionsArray[index].nbCorrectAnswers > 1) {
                        color = "#40ff00";
                    } else if (questionsArray[index].nbCorrectAnswers > -1) {
                        color = "red";
                    }
                    answer2.innerHTML = "<font color='" + color + "'><i>#{translation.answer2}:</i><br></font>" + questionsArray[index].answers[1];
                }
                if (evaluateString(questionsArray[index].answers[2])) {
                    if (questionsArray[index].nbCorrectAnswers > 2) {
                        color = "#40ff00";
                    } else if (questionsArray[index].nbCorrectAnswers > -1) {
                        color = "red";
                    }
                    answer3.innerHTML = "<font color='" + color + "'><i>#{translation.answer3}:</i><br></font>" + questionsArray[index].answers[2];
                }
                if (evaluateString(questionsArray[index].answers[3])) {
                    if (questionsArray[index].nbCorrectAnswers > 3) {
                        color = "#40ff00";
                    } else if (questionsArray[index].nbCorrectAnswers > -1) {
                        color = "red";
                    }
                    answer4.innerHTML = "<font color='" + color + "'><i>#{translation.answer4}:</i><br></font>" + questionsArray[index].answers[3];
                }
                if (evaluateString(questionsArray[index].answers[4])) {
                    if (questionsArray[index].nbCorrectAnswers > 4) {
                        color = "#40ff00";
                    } else if (questionsArray[index].nbCorrectAnswers > -1) {
                        color = "red";
                    }
                    answer5.innerHTML = "<font color='" + color + "'><i>#{translation.answer5}:</i><br></font>" + questionsArray[index].answers[4];
                }
                if (evaluateString(questionsArray[index].answers[5])) {
                    if (questionsArray[index].nbCorrectAnswers > 5) {
                        color = "#40ff00";
                    } else if (questionsArray[index].nbCorrectAnswers > -1) {
                        color = "red";
                    }
                    answer6.innerHTML = "<font color='" + color + "'><i>#{translation.answer6}:</i><br></font>" + questionsArray[index].answers[5];
                }
                if (evaluateString(questionsArray[index].answers[6])) {
                    if (questionsArray[index].nbCorrectAnswers > 6) {
                        color = "#40ff00";
                    } else if (questionsArray[index].nbCorrectAnswers > -1) {
                        color = "red";
                    }
                    answer7.innerHTML = "<font color='" + color + "'><i>#{translation.answer7}:</i><br></font>" + questionsArray[index].answers[6];
                }
                if (evaluateString(questionsArray[index].answers[7])) {
                    if (questionsArray[index].nbCorrectAnswers > 7) {
                        color = "#40ff00";
                    } else if (questionsArray[index].nbCorrectAnswers > -1) {
                        color = "red";
                    }
                    answer8.innerHTML = "<font color='" + color + "'><i>#{translation.answer8}:</i><br></font>" + questionsArray[index].answers[7];
                }
                if (evaluateString(questionsArray[index].answers[8])) {
                    if (questionsArray[index].nbCorrectAnswers > 8) {
                        color = "#40ff00";
                    } else if (questionsArray[index].nbCorrectAnswers > -1) {
                        color = "red";
                    }
                    answer9.innerHTML = "<font color='" + color + "'><i>#{translation.answer9}:</i><br></font>" + questionsArray[index].answers[8];
                }
                if (evaluateString(questionsArray[index].answers[9])) {
                    if (questionsArray[index].nbCorrectAnswers > 9) {
                        color = "#40ff00";
                    } else if (questionsArray[index].nbCorrectAnswers > -1) {
                        color = "red";
                    }
                    answer10.innerHTML = "<font color='" + color + "'><i>#{translation.answer10}:</i><br></font>" + questionsArray[index].answers[9];
                }
                //END SETTING ANSWER OPTIONS
                question_type.innerHTML = questionsArray[index].questionType;
                questionImage.src = "/users_images/" + questionsArray[index].imageName;
                if (questionImage && questionImage.style) {
                    questionImage.style.height = "300px"
                }
                if (!{JSON.stringify(data.currentUser)} == "") {
                    selectButton.disabled = true;
                } else {
                    if (questionsArray[index].userSelected == "selected.png") {
                        selectButton.innerHTML = "Unselect Question"
                    } else {
                        selectButton.innerHTML = "Select Question"
                    }
                }

                //set the average rating
                var stars = ['star1', 'star2', 'star3', 'star4', 'star5'];
                setRating(stars, questionsArray[index].rating);

                //set the user rating
                var ustars = ['ustar1', 'ustar2', 'ustar3', 'ustar4', 'ustar5'];
                setRating(ustars, parseFloat(ratingForResource[index]));
                //setUserRating(parseFloat(ratingForResource[index]))

                modal.classList.toggle("show-modal");
            }
        }

        function toggleModalClose() {
            modal.classList.toggle("show-modal");
        }

        function toggleSequenceModalClose() {
            sequenceModal.classList.toggle("show-modal");
        }

        function setUserRating(rating) {
            var stars = ['ustar1', 'ustar2', 'ustar3', 'ustar4', 'ustar5'];
            var starDesign = 'star on';
            for (var j = 1; j < stars.length + 1; j++) {
                if (rating > (j - 0.25)) {
                    document.getElementById(stars[j - 1]).className = starDesign;
                } else if (rating > (j - 0.75)) {
                    document.getElementById(stars[j - 1]).className = 'star half';
                } else {
                    starDesign = 'star';
                    document.getElementById(stars[j - 1]).className = starDesign;
                }
            }
        }

        function rate1star() {
            rateNStars(1, questionsArray[currentQuestionIndex]);
        }
        function rate2stars() {
            rateNStars(2, questionsArray[currentQuestionIndex]);
        }
        function rate3stars() {
            rateNStars(3, questionsArray[currentQuestionIndex]);
        }
        function rate4stars() {
            rateNStars(4, questionsArray[currentQuestionIndex]);
        }
        function rate5stars() {
            rateNStars(5, questionsArray[currentQuestionIndex]);
        }

        function evaluateString(stringToEvaluate) {
            if (stringToEvaluate != undefined && stringToEvaluate != " " && stringToEvaluate != "") {
                return true;
            } else {
                return false;
            }
        }

        function selectQuestion() {
            document.getElementById('userRating').value = ""
            if (questionsArray[currentQuestionIndex].userSelected == "notselected.png") {
                questionsArray[currentQuestionIndex].userSelected = "selected.png"

                //if the question was unselected without saving inbetween, remove it from the unselectedQuestions array
                if (unselectedQuestions.indexOf(questionsArray[currentQuestionIndex].questionID) != -1) {
                    var indexToRemove = unselectedQuestions.indexOf(questionsArray[currentQuestionIndex].questionID);
                    unselectedQuestions.splice(indexToRemove, 1)
                } else {
                    if (questionsArray[currentQuestionIndex].questionType == "Short Answer") {
                        selectedQuestions.push([questionsArray[currentQuestionIndex].questionID, "SRTA"]);
                    } else {
                        selectedQuestions.push([questionsArray[currentQuestionIndex].questionID, "MLCQ"]);
                    }
                }
                document.getElementById("checkboxImage" + currentQuestionIndex).src = "/images/selected.png";
                document.getElementById('selectedQuestionsField').value = selectedQuestions;
                document.getElementById('unselectedQuestionsField').value = unselectedQuestions;
            } else {
                questionsArray[currentQuestionIndex].userSelected = "notselected.png"

                //if the question was selected without saving inbetween, remove it from the questions array
                var i;
                var indexToRemove = -1;
                for (i = 0; i < selectedQuestions.length && indexToRemove == -1; i++) {
                    if (selectedQuestions[i][0] == questionsArray[currentQuestionIndex].questionID) {
                        indexToRemove = i;
                    }
                }

                if (indexToRemove != -1) {
                    selectedQuestions.splice(indexToRemove,1);
                } else {
                    unselectedQuestions.push(questionsArray[currentQuestionIndex].questionID);
                }

                document.getElementById("checkboxImage" + currentQuestionIndex).src = "/images/notselected.png";
                document.getElementById('unselectedQuestionsField').value = unselectedQuestions;
                document.getElementById('selectedQuestionsField').value = selectedQuestions;
            }
            toggleModalClose();
        }

        function loadMoreQuestions() {
            var table = document.getElementById("questions_table");
            var i = table.rows.length - 1
            var j = table.rows.length
            var questionIndex = i
            for (; i < questionsArray.length && i < 10 + j; i++) {
                var html_image = ["<img src='/users_images/mini_" + questionsArray[questionIndex].imageName + "' id='imageQuest'>"]
                var html_rating = ["<div class='stars'><span class='star' id='" + questionIndex + "_tstar1'></span><span class='star' id='" + questionIndex + "_tstar2'></span><span class='star' id='" + questionIndex + "_tstar3'></span><span class='star' id='" + questionIndex + "_tstar4'></span><span class='star' id='" + questionIndex + "_tstar5'></span></div>"]
                var row = table.insertRow(table.rows.length);
                row.setAttribute("onclick", "toggleModal(this)", 0);

                var cell1 = row.insertCell(0);
                var cell2 = row.insertCell(1);
                var cell3 = row.insertCell(2);
                var cell4 = row.insertCell(3);
                var cell5 = row.insertCell(4);

                cell1.innerHTML = questionsArray[questionIndex].questionText;
                cell2.innerHTML = questionsArray[questionIndex].questionType;
                cell3.innerHTML = html_image
                cell4.innerHTML = html_rating
                cell5.innerHTML = "<img id='checkboxImage" + questionIndex + "' src='/images/" + questionsArray[questionIndex].userSelected + "' >"

                var tstars = ['_tstar1', '_tstar2', '_tstar3', '_tstar4', '_tstar5'];
                var starDesign = 'star on';

                for (var k = 1; k < tstars.length + 1; k++) {
                    if (questionsArray[questionIndex].rating > (k - 0.25)) {
                        document.getElementById(questionIndex + tstars[k - 1]).className = starDesign;
                    } else if (questionsArray[questionIndex].rating > (k - 0.75)) {
                        document.getElementById(questionIndex + tstars[k - 1]).className = 'star half';
                    } else {
                        starDesign = 'star';
                        document.getElementById(questionIndex + tstars[k - 1]).className = starDesign;
                    }
                }
            }
        }

        regionsSelection.onchange = function() {
            if (regionsSelection.value == "All Regions") {
                mainSubjectSelection.options.length = 0;
                for (var k = 0; k < mainSubjectsArray.length; k++) {
                    mainSubjectSelection.options[mainSubjectSelection.options.length] =
                        new Option(mainSubjectsArray[k][0], mainSubjectsArray[k][0]);
                }
            } else {
                mainSubjectSelection.options.length = 1;
                for (var k = 0; k < mainSubjectsArray.length; k++) {
                    if (mainSubjectsArray[k][1] == regionsSelection.value) {
                        mainSubjectSelection.options[mainSubjectSelection.options.length] =
                            new Option(mainSubjectsArray[k][0], mainSubjectsArray[k][0]);
                    }
                }
            }
        }

        function toggleCreateResource() {
            createResourceModal.classList.toggle("show-modal");
        }


        function windowOnClick(event) {
            if (event.target === modal || event.target === sequenceModal) {
                toggleModal();
            }
        }
        window.addEventListener("click", windowOnClick);